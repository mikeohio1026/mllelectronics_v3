[{"content":"Introduction to Keyboard Warrior This a page about the Keyboard Warrior which was my Senior Project for my Electrical and Electronic engineering degree at the University of Akron.\nHardware Layout \u0026amp; Design Considerations The badge is based on STM32F303RET6 processor which has 26 I/O, builtin 512kB of flash memory, 80kB of RAM, and operates at 3.3 volts with a max clock frequnecy of 72 MHz. Communication and debug on this board consisted of DFU (Device Firmware Update) via USB C and a SWD(Serial Wire debug) port. This project was split into two parts one being the main devboard that had STM32F303 and a daughter board being a keyboard with deattachable accessories. The fimware on the board is the QMK (Quantum Mechnical keyboard) and is very customizable. Some highlights regarding design include the pogo pin connector for modular attachments via I2C bus, design for high USB connection, crystal oscillator and power supply layout.\n Keyboard Warrior Block Diagram \nThe block diagram outlines what I envisioned as the ultimate modular mechanical keyboard that has a wide variety of attachments that would fit any situtation. With the addition of an I2C bus on the keyboard this would allow for a variety of expansions but the main focus for this project was the Numeric Keypad module as it was most realistic given the time frame for this project. Schematics are included below and are broken into a uC development module, the main keyboard and the attachment keyboard.\n Crystal Oscillator Layout   STM32 Clock Configurator \nThe crystal oscillator layout was an area that I focused on when designing the dev board. The ST Microelectronics AN2867 application note was very informative on the design of Pierce oscillators which are critical to the ensuring stable and reliable operation from the microcontroller. The goal of this design was to generate a 48 MHz clock which was required by the USB protocol. STM32 Cube IDE has a Clock Frequency configurator which validated my selection of the J49SMH which is 8 MHZ quartz oscillator at ±30ppm with a load capacitance of 12 pF.\n USB C - Differential Routing   Power Supply Design \nThe USB C protcool requires that signal runs be as short as possible and the data line pairs be differentially routed as to minimize issues with signal quality. Note that USB ESD protection chip was also placed inline with the STM32F303 microcontroller. Thought was also put into my DRC rules and power supply design.\n Finalized Component Layout   Keyboard Warrior Mechanical Render \nThis layout is a standard microcontroller layout that follows sound engineering practices that emphasize stability, functionality and reliable design.\nMechanical Design The case is made of combination of 1/16th and 3/16th stacked 6061 aluminum that sandwhiches the main keyboard circuit board. It utilzes Torx screws to hold the everything together. All CAD modeling was done in Solidworks 2020 to make sure that everything fit and CAM was done with the WardCAM software. One the biggest challanges was cutting out the 1/16\u0026quot; 6061 on the waterjet as cutting materials under 1/8\u0026quot; is difficult due the turbulence of the jet stream flexing the thin metal plate.\n Keyboard Warrior Mechanical Stackup \n Keyboard Assembly Time \n Full Keyboard   Keyboard attachment \nSoftware Used  KiCad V5.1 - PCB Schematic and Electronic Design Software STM32 Cube IDE - PLL Clock configurator and intial testing of STM32F303 Solidworks 2019 - Mechanical design software WardCAM - Waterjet custom case   Prepped for Flashing with STM32 Cube IDE \nLessons Learned  Don\u0026rsquo;t underestimate the time it takes to write embedded software Tolerance stacks matter and header pins add height which need to be accounted for  Future Plans  Keyboard Warrior V2 - Builtin USB 3.0 Hub, RGB back light and new 80% keyboard layout Continue development on the I2C bus code and additional acessories  ","date":"2021-04-28T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/keyboard-warrior/stm32_complete_hu6dd7ed0bcc175564937ceaac420271ca_254600_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/keyboard-warrior/","title":"Keyboard Warrior"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应jldsfjklsdjlkfsd该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/test-chinese/","title":"Chinese Test"},{"content":"Introduction to the GCC Mercury This a page about the GCC Mercury II laser which is a CO2 based laser\nHardware Overview  Blimp V1 Badge Schematic \nSoftware Needed to Run  KiCad V5.1 - PCB Schematic and Electronic Design Software Arduino IDE - AVR as ISP to program the board Solidworks 2019 - Mechanical design software Inkscape - Vector graphics editor to design blimp shape  Lessons Learned There were several lessons learned with this project as I had tight timeline to produce and finish this before the Fall 2019 career fair at UAkron.\n Check if your I2C device has pull up resistors and design in zero ohm resistors to fix if necessary. Ensure that core components such as the processor are in stock and are purchased before starting schematic and PCB layout Converting between a Bitmap image to Vector graphic is difficult but extremely rewarding when done  Future Plans  Make a revision 2 of the Blimp Badge Add an external clock circuit so that additional sensors can be utilized. Add an ESP8266 module for wireless capability  ","date":"2020-08-20T00:00:00Z","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/gcc-laser-reference/","title":"GCC Laser Reference"},{"content":"Introduction to Hackathons This a page is a curated selection of hackathon projects that I\u0026rsquo;ve worked on over my 3+ years at the University of Akron. Most of the hacks on this page are hardware based. A large majority of my hacks involve rapid prototyping techniques such as 3d printing, laser cutting and development with the Arduino and ESP32 platforms. As hardware hackers it is not uncommon to carry around a large box of hardware so as a group we decided to build Auto Tank a robotic pack mule for hackathons as featured below.\nHAkron 4K - Leading the Hardware Team As a HAkron officer, I got to work with the awesome people at HAkron to put together this amazing weekend of hacking and making at the Bounce Innovation Hub. My primary responsiblty was managing the hardware which meant teams could approach us with unqiue hardware challanges or requests for intresting components. It was amazing getting to see the creativity, ingentuity and passion people brought with their projects. I was able to help over 20+ students build a wide variety of hardware projects over a 24 hour time span.\nHAkron 3000 - Nifty Cakes Worked with a team to convert a CoreXY 3d printer into a custom baked good frosting robot. A stepper driven mechanism was designed and printed by the printer. Which was then transformed it a baked goods decorating machine. This unique project was a great deep dive into customization with hardware and firmware on the Creality 3d printer board.\nWon Most Complex Hardware Hack  Nifty Cakes Stepper Motor Assembly  Completed Nifty Cakes Robot \nMakeHarvard 2021: Compliant Prosthetic Finger Design The prosthetic finger utilizes compliant flexure joints culminating in a mechanism with naturalistic finger kinematics that has the benefits of: a reduced parts count (a \u0026ldquo;print-in-place\u0026rdquo; design), being light-weight and cost effectiveness \u0026ndash; make it more accessible and practical for the millions of amputees in low socioeconomic situations.\nWon Best Hardware Hack\n Full Rendering of Hand  3D of A Finger Joint \n CAD Rendering of Finger Joint \nMakeHarvard 2020: Auto-safety for the Autonomous Auto-safety for the Autonomous is prototype reinforcement learning platform that utilzes custom software and a laser cut RC car. To demo this idea, we built a custom laser cut acrylic RC car with an Arduino and ESP32. We used an array of HC-SR04 ultrasonic sensors to measure distances from each edge of the robot. OpenAI Gym was used to build a custom physics engine and environment for this vehicle, and ran the learning algorithm on Google\u0026rsquo;s Deep Learning VM. It can be shown in both simulation and the real-world how the algorithm can be used to reject unsafe actions and replace them with safe ones, preventing collisions and preserving the robot.\n Auto-safety for the Autonomous Robot \nKent Hack Enough 2019 - Respondash Respon-dash is unique product that utilizes a visual alerting system. Using a light sensor, Respon-dash\u0026rsquo;s outer component is on the look out for flashing lights, like those from a police car, behind the vehicle. If flashing lights are detected, then it sends a \u0026lsquo;ping\u0026rsquo; to Respon-dash\u0026rsquo;s inner component, which flashes briefly in the driver\u0026rsquo;s peripheral vision, alerting them to a potential situation that they may need to respond to. Respon-dash is built with two Arduino Unos, a pair of NRF24L01 wireless modules, a photo resistor, KY-037 sound detection sensor, and a Neo Pixel Indicator LED.\nWon Best Hardware Hack\n Render of the Respondash System \nLessons Learned from Hackathons  Have Fun! It\u0026rsquo;s awesome getting to work with a wide variety of people and really build something cool. Not everything is going to go right the first time. So plan ahead and set aside more time than you think you need for troubleshooting/debug. Bringing together a great team and learning something new is more important than winning.  ","date":"2020-02-15T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/hackathons/mike_hackathon_hu43d0ea22958600f4666d27a5d5b545ce_83104_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/hackathons/","title":"Hackathons"},{"content":"Introduction to the Blimp Badge This a page about the Blimp Badge which is a Atmega328p based badge made for the Sophmore career fair at UAkron to showcase my skills in embedded systems design, circuit layout and programming. The badge features a .96\u0026quot; I2C OLED that outputs a QR code my website mllelectronics.com which has my resume and project portfolio on it.\nHardware Layout \u0026amp; Design Considerations The badge is based on Atmega328P and utilzes the internal 8mHz clocking running on 3.3V. Power is provided by a the \u0026ldquo;INSERT NAME\u0026rdquo; regulator. The chosen display was a generic .96\u0026quot; I2C OLED module powered by the SSD1306 CMOS display driver. All components were surface mount with all of them being 1206 sized in order to make everything hand solderable.\nSome interesting design choices that were made such as utilzing the internal clock and the usage of AAA batteries. The internal clock was utilzed as it would have reduced component count and complexity of the design. Normally it would be preferable to have an external clock provides precise timing and accuracy which are needed in asynchronous protocols such as UART or implementation of high speed protocols such as USB. However since I was only utilzing a single I2C bus which is synchronous. AAA batteries were utilized as they easily avaiable and not prone to challanges faced by utilizing a LIPO based battery system.\n Blimp V1 Badge Schematic \nSoftware Used  KiCad V5.1 - PCB Schematic and Electronic Design Software Arduino IDE - AVR as ISP to program the board Solidworks 2019 - Mechanical design software Inkscape - Vector graphics editor to design blimp shape  Lessons Learned There were several lessons learned with this project as I had tight timeline to produce and finish this before the Fall 2019 career fair at UAkron.\n Check if your I2C device has pull up resistors and design in zero ohm resistors to fix if necessary. Ensure that core components such as the processor are in stock and are purchased before starting schematic and PCB layout Converting between a Bitmap image to Vector graphic is difficult but extremely rewarding when done  Future Plans  Make a revision 2 of the Blimp Badge Add an external clock circuit so that additional sensors can be utilized. Add an ESP8266 module for wireless capability  ","date":"2020-01-20T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/blimp-badge/blimp_badge_render_hu34acf9d591f091ce4f034d36ab0fece7_315022_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/blimp-badge/","title":"Blimp Badge"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://mikeohio1026.github.io/mllelectronics_v3/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://mikeohio1026.github.io/mllelectronics_v3/p/emoji-support/","title":"Emoji Support"}]