<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MLL Electronics</title><link>https://mikeohio1026.github.io/mllelectronics_v3/</link><description>Recent content on MLL Electronics</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mikeohio1026.github.io/mllelectronics_v3/index.xml" rel="self" type="application/rss+xml"/><item><title>Keyboard Warrior</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/keyboard-warrior/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/keyboard-warrior/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/keyboard-warrior/stm32_complete.jpg" alt="Featured image of post Keyboard Warrior" />&lt;h2 id="introduction-to-keyboard-warrior">Introduction to Keyboard Warrior&lt;/h2>
&lt;p>This a page about the Keyboard Warrior which was my Senior Project for my Electrical and Electronic engineering degree at the University of Akron.&lt;/p>
&lt;h2 id="hardware-layout--design-considerations">Hardware Layout &amp;amp; Design Considerations&lt;/h2>
&lt;p>The badge is based on STM32F303RET6 processor which has 26 I/O, builtin 512kB of flash memory, 80kB of RAM, and operates at 3.3 volts with a max clock frequnecy of 72 MHz. Communication and debug on this board consisted of DFU (Device Firmware Update) via USB C and a SWD(Serial Wire debug) port. This project was split into two parts one being the main devboard that had STM32F303 and a daughter board being a keyboard with deattachable accessories. The fimware on the board is the QMK (Quantum Mechnical keyboard) and is very customizable. Some highlights regarding design include the pogo pin connector for modular attachments via I2C bus, design for high USB connection, crystal oscillator and power supply layout.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 417px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_block.jpg" data-size="963x554">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_block.jpg"
width="963"
height="554"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_block_hu9a3be497284e9ba7186935c774bd8b41_25970_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_block_hu9a3be497284e9ba7186935c774bd8b41_25970_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Keyboard Warrior Block Diagram">
&lt;/a>
&lt;figcaption>Keyboard Warrior Block Diagram&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The block diagram outlines what I envisioned as the ultimate modular mechanical keyboard that has a wide variety of attachments that would fit any situtation. With the addition of an I2C bus on the keyboard this would allow for a variety of expansions but the main focus for this project was the Numeric Keypad module as it was most realistic given the time frame for this project. Schematics are included below and are broken into a uC development module, the main keyboard and the attachment keyboard.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 113;
flex-basis: 272px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_crystal.jpg" data-size="671x590">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_crystal.jpg"
width="671"
height="590"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_crystal_hu098135d4ed694729ab743af6f9ebbaa7_92391_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_crystal_hu098135d4ed694729ab743af6f9ebbaa7_92391_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Crystal Oscillator Layout">
&lt;/a>
&lt;figcaption>Crystal Oscillator Layout&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_clock.jpg" data-size="1503x829">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_clock.jpg"
width="1503"
height="829"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_clock_hu6a2880662a0e51bfbcb516decfeecfce_124875_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_clock_hu6a2880662a0e51bfbcb516decfeecfce_124875_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="STM32 Clock Configurator">
&lt;/a>
&lt;figcaption>STM32 Clock Configurator&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The crystal oscillator layout was an area that I focused on when designing the dev board. The ST Microelectronics AN2867 application note was very informative on the design of Pierce oscillators which are critical to the ensuring stable and reliable operation from the microcontroller. The goal of this design was to generate a 48 MHz clock which was required by the USB protocol. STM32 Cube IDE has a Clock Frequency configurator which validated my selection of the J49SMH which is 8 MHZ quartz oscillator at Â±30ppm with a load capacitance of 12 pF.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 85;
flex-basis: 204px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_differential.jpg" data-size="468x548">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_differential.jpg"
width="468"
height="548"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_differential_hu4955d3a87fca937c34dd24c61d0fc9ff_69549_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_differential_hu4955d3a87fca937c34dd24c61d0fc9ff_69549_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="USB C - Differential Routing">
&lt;/a>
&lt;figcaption>USB C - Differential Routing&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 280px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_supply_layout.jpg" data-size="727x622">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_supply_layout.jpg"
width="727"
height="622"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_supply_layout_hu4cf42d6623c3709db7492a6a6d9903fb_86420_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_supply_layout_hu4cf42d6623c3709db7492a6a6d9903fb_86420_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Power Supply Design">
&lt;/a>
&lt;figcaption>Power Supply Design&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The USB C protcool requires that signal runs be as short as possible and the data line pairs be differentially routed as to minimize issues with signal quality. Note that USB ESD protection chip was also placed inline with the STM32F303 microcontroller. Thought was also put into my DRC rules and power supply design.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 91;
flex-basis: 220px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_outline.jpg" data-size="565x615">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_outline.jpg"
width="565"
height="615"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_outline_hu831d70827d40d3df0caef5e052b2d329_50640_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_outline_hu831d70827d40d3df0caef5e052b2d329_50640_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Finalized Component Layout">
&lt;/a>
&lt;figcaption>Finalized Component Layout&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 103;
flex-basis: 248px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_render.jpg" data-size="792x765">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_render.jpg"
width="792"
height="765"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_render_hu699dc281e0f25a5235e928e45996a18f_100283_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/stm32_render_hu699dc281e0f25a5235e928e45996a18f_100283_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Keyboard Warrior Mechanical Render">
&lt;/a>
&lt;figcaption>Keyboard Warrior Mechanical Render&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>This layout is a standard microcontroller layout that follows sound engineering practices that emphasize stability, functionality and reliable design.&lt;/p>
&lt;h2 id="mechanical-design">Mechanical Design&lt;/h2>
&lt;p>The case is made of combination of 1/16th and 3/16th stacked 6061 aluminum that sandwhiches the main keyboard circuit board. It utilzes Torx screws to hold the everything together. All CAD modeling was done in Solidworks 2020 to make sure that everything fit and CAM was done with the WardCAM software. One the biggest challanges was cutting out the 1/16&amp;quot; 6061 on the waterjet as cutting materials under 1/8&amp;quot; is difficult due the turbulence of the jet stream flexing the thin metal plate.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_stack.jpg" data-size="2048x1536">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_stack.jpg"
width="2048"
height="1536"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_stack_huf008e2c24bb1825c723e53d568c5539c_300916_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_stack_huf008e2c24bb1825c723e53d568c5539c_300916_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Keyboard Warrior Mechanical Stackup">
&lt;/a>
&lt;figcaption>Keyboard Warrior Mechanical Stackup&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_assemble.jpg" data-size="4032x3024">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_assemble.jpg"
width="4032"
height="3024"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_assemble_hu474b55ecd88037c125f2cfa204d1ebf2_2895377_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_assemble_hu474b55ecd88037c125f2cfa204d1ebf2_2895377_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Keyboard Assembly Time">
&lt;/a>
&lt;figcaption>Keyboard Assembly Time&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_full.jpg" data-size="1499x834">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_full.jpg"
width="1499"
height="834"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_full_hu5c9adf3edef0493fa205da07c92889af_214779_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_full_hu5c9adf3edef0493fa205da07c92889af_214779_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Full Keyboard">
&lt;/a>
&lt;figcaption>Full Keyboard&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 236px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_side.jpg" data-size="688x697">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_side.jpg"
width="688"
height="697"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_side_hu2b804ce995963586a04d860183a4a096_80861_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_side_hu2b804ce995963586a04d860183a4a096_80861_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Keyboard attachment">
&lt;/a>
&lt;figcaption>Keyboard attachment&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="software-used">Software Used&lt;/h2>
&lt;ul>
&lt;li>KiCad V5.1 - PCB Schematic and Electronic Design Software&lt;/li>
&lt;li>STM32 Cube IDE - PLL Clock configurator and intial testing of STM32F303&lt;/li>
&lt;li>Solidworks 2019 - Mechanical design software&lt;/li>
&lt;li>WardCAM - Waterjet custom case&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_flash.jpg" data-size="4032x3024">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_flash.jpg"
width="4032"
height="3024"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_flash_hu0b06e2a541f3fe4ba2d9e13f1e83b2bb_2953863_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/keyboard-warrior/keyboard_flash_hu0b06e2a541f3fe4ba2d9e13f1e83b2bb_2953863_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Prepped for Flashing with STM32 Cube IDE">
&lt;/a>
&lt;figcaption>Prepped for Flashing with STM32 Cube IDE&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="lessons-learned">Lessons Learned&lt;/h2>
&lt;ol>
&lt;li>Don&amp;rsquo;t underestimate the time it takes to write embedded software&lt;/li>
&lt;li>Tolerance stacks matter and header pins add height which need to be accounted for&lt;/li>
&lt;/ol>
&lt;h2 id="future-plans">Future Plans&lt;/h2>
&lt;ul>
&lt;li>Keyboard Warrior V2 - Builtin USB 3.0 Hub, RGB back light and new 80% keyboard layout&lt;/li>
&lt;li>Continue development on the I2C bus code and additional acessories&lt;/li>
&lt;/ul></description></item><item><title>Chinese Test</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/test-chinese/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/test-chinese/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" alt="Featured image of post Chinese Test" />&lt;h2 id="æ­£ææµè¯">æ­£ææµè¯&lt;/h2>
&lt;p>èè¿äºå¹¶ä¸æ¯å®å¨éè¦ï¼æ´å éè¦çé®é¢æ¯ï¼ å¸¦çè¿äºé®é¢ï¼æä»¬æ¥å®¡è§ä¸ä¸å­¦çä¼éä¼ã æ¢ç¶å¦ä½ï¼ å¯¹æä¸ªäººèè¨ï¼å­¦çä¼éä¼ä¸ä»ä»æ¯ä¸ä¸ªéå¤§çäºä»¶ï¼è¿å¯è½ä¼æ¹åæçäººçã æä»¬ä¸å¾ä¸é¢å¯¹ä¸ä¸ªéå¸¸å°´å°¬çäºå®ï¼é£å°±æ¯ï¼ å¯æ¯ï¼å³ä½¿æ¯è¿æ ·ï¼å­¦çä¼éä¼çåºç°ä»ç¶ä»£è¡¨äºä¸å®çæä¹ã å­¦çä¼éä¼ï¼åçäºä¼å¦ä½ï¼ä¸åçåä¼å¦ä½ã ç»è¿ä¸è¿°è®¨è®ºï¼ çæ´»ä¸­ï¼è¥å­¦çä¼éä¼åºç°äºï¼æä»¬å°±ä¸å¾ä¸èèå®åºç°äºçäºå®ã å­¦çä¼éä¼ï¼å°åºåºè¯¥å¦ä½å®ç°ã è¿æ ·çæ¥ï¼ å¨è¿ç§å°é¾çææ©ä¸ï¼æ¬äººææ¥æ³å»ï¼å¯é£é¾å®ã å¯¹æä¸ªäººèè¨ï¼å­¦çä¼éä¼ä¸ä»ä»æ¯ä¸ä¸ªéå¤§çäºä»¶ï¼è¿å¯è½ä¼æ¹åæçäººçã å°±æä¸ªäººæ¥è¯´ï¼å­¦çä¼éä¼å¯¹æçæä¹ï¼ä¸è½ä¸è¯´éå¸¸éå¤§ã èå£«æ¯äºæ¾ç»æå°è¿ï¼äººçä¸çæ¯ç­çï¼ä½å¦æåå£å°è¿è¿ä¸çï¼å°±å¤ªé¿äºãè¿ä¼¼ä¹è§£ç­äºæççæã è«æç¹è¯´è¿ä¸å¥å¯æå²ççè¯ï¼è°åæä¸æ ·ç¨åï¼è°å°±ä¼åæä¸æ ·æåãè¿å¯åäºæï¼ å¯¹æä¸ªäººèè¨ï¼å­¦çä¼éä¼ä¸ä»ä»æ¯ä¸ä¸ªéå¤§çäºä»¶ï¼è¿å¯è½ä¼æ¹åæçäººçã å­¦çä¼éä¼ï¼å°åºåºjldsfjklsdjlkfsdè¯¥å¦ä½å®ç°ã ä¸è¬æ¥è¯´ï¼ ä»è¿ä¸ªè§åº¦æ¥çï¼ è¿ç§äºå®å¯¹æ¬äººæ¥è¯´æä¹éå¤§ï¼ç¸ä¿¡å¯¹è¿ä¸ªä¸çä¹æ¯æä¸å®æä¹çã å¨è¿ç§å°é¾çææ©ä¸ï¼æ¬äººææ¥æ³å»ï¼å¯é£é¾å®ã äºè§£æ¸æ¥å­¦çä¼éä¼å°åºæ¯ä¸ç§æä¹æ ·çå­å¨ï¼æ¯è§£å³ä¸åé®é¢çå³é®ã ä¸è¬æ¥è¯´ï¼ çæ´»ä¸­ï¼è¥å­¦çä¼éä¼åºç°äºï¼æä»¬å°±ä¸å¾ä¸èèå®åºç°äºçäºå®ã é®é¢çå³é®ç©¶ç«ä¸ºä½ï¼ èè¿äºå¹¶ä¸æ¯å®å¨éè¦ï¼æ´å éè¦çé®é¢æ¯ã&lt;/p>
&lt;p>å¥¥æ¯ç¹æ´å¤«æ¯åºæ¾ç»è¯´è¿ï¼å±åçäºä¸ï¼å±åçæäºï¼å¯ä»¥ä½¿äººä»¬äº§çå¿åä¸åçåéããå¸¦çè¿å¥è¯ï¼æä»¬è¿è¦æ´å æéçå®¡è§è¿ä¸ªé®é¢ï¼ ä¸è¬æ¥è®²ï¼æä»¬é½å¿é¡»å¡å¿æéçèèèèã æ¢ç¶å¦æ­¤ï¼ è¿ç§äºå®å¯¹æ¬äººæ¥è¯´æä¹éå¤§ï¼ç¸ä¿¡å¯¹è¿ä¸ªä¸çä¹æ¯æä¸å®æä¹çã å¸¦çè¿äºé®é¢ï¼æä»¬æ¥å®¡è§ä¸ä¸å­¦çä¼éä¼ã æè®¤ä¸ºï¼ æè®¤ä¸ºï¼ å¨è¿ç§å°é¾çææ©ä¸ï¼æ¬äººææ¥æ³å»ï¼å¯é£é¾å®ã é®é¢çå³é®ç©¶ç«ä¸ºä½ï¼ æ¯ä¸ªäººé½ä¸å¾ä¸é¢å¯¹è¿äºé®é¢ã å¨é¢å¯¹è¿ç§é®é¢æ¶ï¼ è¦æ³æ¸æ¥ï¼å­¦çä¼éä¼ï¼å°åºæ¯ä¸ç§æä¹æ ·çå­å¨ã æè®¤ä¸ºï¼ æ¢ç¶å¦æ­¤ï¼ æ¯ä¸ªäººé½ä¸å¾ä¸é¢å¯¹è¿äºé®é¢ã å¨é¢å¯¹è¿ç§é®é¢æ¶ï¼ é£ä¹ï¼ æè®¤ä¸ºï¼ å­¦çä¼éä¼å ä½èåçã&lt;/p>
&lt;h2 id="å¼ç¨">å¼ç¨&lt;/h2>
&lt;blockquote>
&lt;p>æå¿µæ¯ææçå¿§ä¼¤åä¸åç¿è&lt;br>
è®©æåä¸äºé£ä¸è¿å¨è¿å¾æ¸¸è¡&lt;br>
ä¸åèå«çä½  å°±ç®ä¸ºäºæçæ³&lt;br>
è¿ä¹æ²ççåµæ¤ ææä¹è½ç¿±ç¿&lt;/p>
&lt;p>&lt;em>&lt;a class="link" href="https://www.youtube.com/watch?v=3aypp_YlBzI" target="_blank" rel="noopener"
>ææçæå· - ç°é¦¥ç&lt;/a>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="å¾ç">å¾ç&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 66;
flex-basis: 160px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg" data-size="667x1000">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg"
width="667"
height="1000"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Florian Klauer on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Florian Klauer on Unsplash&lt;/figcaption>
&lt;/figure> &lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 359px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg" data-size="1000x667">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg"
width="1000"
height="667"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Luca Bravo on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Luca Bravo on Unsplash&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" data-size="1000x750">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg"
width="1000"
height="750"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Helena Hertz on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Helena Hertz on Unsplash&lt;/figcaption>
&lt;/figure> &lt;figure
class="gallery-image"
style="
flex-grow: 66;
flex-basis: 160px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg" data-size="667x1000">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg"
width="667"
height="1000"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Hudai Gayiran on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Hudai Gayiran on Unsplash&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">![&lt;span class="nt">Photo by Florian Klauer on Unsplash&lt;/span>](&lt;span class="na">florian-klauer-nptLmg6jqDo-unsplash.jpg&lt;/span>) ![&lt;span class="nt">Photo by Luca Bravo on Unsplash&lt;/span>](&lt;span class="na">luca-bravo-alS7ewQ41M8-unsplash.jpg&lt;/span>)
![&lt;span class="nt">Photo by Helena Hertz on Unsplash&lt;/span>](&lt;span class="na">helena-hertz-wWZzXlDpMog-unsplash.jpg&lt;/span>) ![&lt;span class="nt">Photo by Hudai Gayiran on Unsplash&lt;/span>](&lt;span class="na">hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ç¸åè¯­æ³æ¥èª &lt;a class="link" href="https://typlog.com/" target="_blank" rel="noopener"
>Typlog&lt;/a>&lt;/p></description></item><item><title>GCC Laser Reference</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/gcc-laser-reference/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/gcc-laser-reference/</guid><description>&lt;h2 id="introduction-to-the-gcc-mercury">Introduction to the GCC Mercury&lt;/h2>
&lt;p>This a page about the GCC Mercury II laser which is a CO2 based laser&lt;/p>
&lt;h2 id="hardware-overview">Hardware Overview&lt;/h2>
&lt;p>&lt;figure
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/blimp_schematic.jpg" >
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/blimp_schematic.jpg"
loading="lazy"
alt="Blimp V1 Badge Schematic">
&lt;/a>
&lt;figcaption>Blimp V1 Badge Schematic&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="software-needed-to-run">Software Needed to Run&lt;/h2>
&lt;ul>
&lt;li>KiCad V5.1 - PCB Schematic and Electronic Design Software&lt;/li>
&lt;li>Arduino IDE - AVR as ISP to program the board&lt;/li>
&lt;li>Solidworks 2019 - Mechanical design software&lt;/li>
&lt;li>Inkscape - Vector graphics editor to design blimp shape&lt;/li>
&lt;/ul>
&lt;h2 id="lessons-learned">Lessons Learned&lt;/h2>
&lt;p>There were several lessons learned with this project as I had tight timeline to produce and finish this before the Fall 2019 career fair at UAkron.&lt;/p>
&lt;ol>
&lt;li>Check if your I2C device has pull up resistors and design in zero ohm resistors to fix if necessary.&lt;/li>
&lt;li>Ensure that core components such as the processor are in stock and are purchased before starting schematic and PCB layout&lt;/li>
&lt;li>Converting between a Bitmap image to Vector graphic is difficult but extremely rewarding when done&lt;/li>
&lt;/ol>
&lt;h2 id="future-plans">Future Plans&lt;/h2>
&lt;ul>
&lt;li>Make a revision 2 of the Blimp Badge&lt;/li>
&lt;li>Add an external clock circuit so that additional sensors can be utilized.&lt;/li>
&lt;li>Add an ESP8266 module for wireless capability&lt;/li>
&lt;/ul></description></item><item><title>Hackathons</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/hackathons/</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/hackathons/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/hackathons/mike_hackathon.jpg" alt="Featured image of post Hackathons" />&lt;h2 id="introduction-to-hackathons">Introduction to Hackathons&lt;/h2>
&lt;p>This a page is a curated selection of hackathon projects that I&amp;rsquo;ve worked on over my 3+ years at the University of Akron. Most of the hacks on this page are hardware based. A large majority of my hacks involve rapid prototyping techniques such as 3d printing, laser cutting and development with the Arduino and ESP32 platforms. As hardware hackers it is not uncommon to carry around a large box of hardware so as a group we decided to build Auto Tank a robotic pack mule for hackathons as featured below.&lt;/p>
&lt;h2 id="hakron-4k----leading-the-hardware-team">HAkron 4K - Leading the Hardware Team&lt;/h2>
&lt;p>As a HAkron officer, I got to work with the awesome people at HAkron to put together this amazing weekend of hacking and making at the Bounce Innovation Hub. My primary responsiblty was managing the hardware which meant teams could approach us with unqiue hardware challanges or requests for intresting components. It was amazing getting to see the creativity, ingentuity and passion people brought with their projects. I was able to help over 20+ students build a wide variety of hardware projects over a 24 hour time span.&lt;/p>
&lt;h2 id="hakron-3000---nifty-cakes">HAkron 3000 - Nifty Cakes&lt;/h2>
&lt;p>Worked with a team to convert a CoreXY 3d printer into a custom baked good frosting robot. A stepper driven mechanism was designed and printed by the printer. Which was then transformed it a baked goods decorating machine. This unique project was a great deep dive into customization with hardware and firmware on the Creality 3d printer board.&lt;/p>
&lt;p>&lt;strong>Won Most Complex Hardware Hack&lt;/strong>
&lt;figure
class="gallery-image"
style="
flex-grow: 75;
flex-basis: 180px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_assembly.jpg" data-size="960x1280">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_assembly.jpg"
width="960"
height="1280"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_assembly_hu17cae4bc8c7eb34e8eef6037b1625124_123866_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_assembly_hu17cae4bc8c7eb34e8eef6037b1625124_123866_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Nifty Cakes Stepper Motor Assembly">
&lt;/a>
&lt;figcaption>Nifty Cakes Stepper Motor Assembly&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 75;
flex-basis: 180px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_extruder.jpg" data-size="960x1280">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_extruder.jpg"
width="960"
height="1280"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_extruder_huf8755c2c7e3e946f04f21d96459450b0_134420_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/nifty_cakes_extruder_huf8755c2c7e3e946f04f21d96459450b0_134420_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Completed Nifty Cakes Robot">
&lt;/a>
&lt;figcaption>Completed Nifty Cakes Robot&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="makeharvard-2021-compliant-prosthetic-finger-design">MakeHarvard 2021: Compliant Prosthetic Finger Design&lt;/h2>
&lt;p>The prosthetic finger utilizes compliant flexure joints culminating in a mechanism with naturalistic finger kinematics that has the benefits of: a reduced parts count (a &amp;ldquo;print-in-place&amp;rdquo; design), being light-weight and cost effectiveness &amp;ndash; make it more accessible and practical for the millions of amputees in low socioeconomic situations.&lt;/p>
&lt;p>&lt;strong>Won Best Hardware Hack&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/hand_model_complete.jpg" data-size="806x454">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/hand_model_complete.jpg"
width="806"
height="454"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/hand_model_complete_hu9057d6163b6ea2fb99c9399162d537a5_54700_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/hand_model_complete_hu9057d6163b6ea2fb99c9399162d537a5_54700_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Full Rendering of Hand ">
&lt;/a>
&lt;figcaption>Full Rendering of Hand&lt;/figcaption>
&lt;/figure>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/3d_print_hand.jpg" data-size="1280x960">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/3d_print_hand.jpg"
width="1280"
height="960"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/3d_print_hand_hu1db8876d45a14860d71a3fad86bbf25a_80387_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/3d_print_hand_hu1db8876d45a14860d71a3fad86bbf25a_80387_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="3D of A Finger Joint">
&lt;/a>
&lt;figcaption>3D of A Finger Joint&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 228;
flex-basis: 549px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/final_hand.jpg" data-size="1922x840">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/final_hand.jpg"
width="1922"
height="840"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/final_hand_hu060e2663546bad0a5e325639e10c702e_32464_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/final_hand_hu060e2663546bad0a5e325639e10c702e_32464_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="CAD Rendering of Finger Joint">
&lt;/a>
&lt;figcaption>CAD Rendering of Finger Joint&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="makeharvard-2020-auto-safety-for-the-autonomous">MakeHarvard 2020: Auto-safety for the Autonomous&lt;/h2>
&lt;p>Auto-safety for the Autonomous is prototype reinforcement learning platform that utilzes custom software and a laser cut RC car.
To demo this idea, we built a custom laser cut acrylic RC car with an Arduino and ESP32. We used an array of HC-SR04 ultrasonic sensors to measure distances from each edge of the robot. OpenAI Gym was used to build a custom physics engine and environment for this vehicle, and ran the learning algorithm on Google&amp;rsquo;s Deep Learning VM. It can be shown in both simulation and the real-world how the algorithm can be used to reject unsafe actions and replace them with safe ones, preventing collisions and preserving the robot.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/auto_safety.jpg" data-size="1280x960">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/auto_safety.jpg"
width="1280"
height="960"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/auto_safety_hu69b9ef34dd6aaeae8936a4f1acd30dc7_118099_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/auto_safety_hu69b9ef34dd6aaeae8936a4f1acd30dc7_118099_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Auto-safety for the Autonomous Robot">
&lt;/a>
&lt;figcaption>Auto-safety for the Autonomous Robot&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="kent-hack-enough-2019---respondash">Kent Hack Enough 2019 - Respondash&lt;/h2>
&lt;p>Respon-dash is unique product that utilizes a visual alerting system. Using a light sensor, Respon-dash&amp;rsquo;s outer component is on the look out for flashing lights, like those from a police car, behind the vehicle. If flashing lights are detected, then it sends a &amp;lsquo;ping&amp;rsquo; to Respon-dash&amp;rsquo;s inner component, which flashes briefly in the driver&amp;rsquo;s peripheral vision, alerting them to a potential situation that they may need to respond to. Respon-dash is built with two Arduino Unos, a pair of NRF24L01 wireless modules, a photo resistor, KY-037 sound detection sensor, and a Neo Pixel Indicator LED.&lt;/p>
&lt;p>&lt;strong>Won Best Hardware Hack&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/respondash_render.png" data-size="1604x892">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/respondash_render.png"
width="1604"
height="892"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/respondash_render_hudf890a96dc3f8fde010aacb5f4a32904_978612_480x0_resize_box_3.png 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/hackathons/respondash_render_hudf890a96dc3f8fde010aacb5f4a32904_978612_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Render of the Respondash System">
&lt;/a>
&lt;figcaption>Render of the Respondash System&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="lessons-learned-from-hackathons">Lessons Learned from Hackathons&lt;/h2>
&lt;ol>
&lt;li>Have Fun! It&amp;rsquo;s awesome getting to work with a wide variety of people and really build something cool.&lt;/li>
&lt;li>Not everything is going to go right the first time. So plan ahead and set aside more time than you think you need for troubleshooting/debug.&lt;/li>
&lt;li>Bringing together a great team and learning something new is more important than winning.&lt;/li>
&lt;/ol></description></item><item><title>Blimp Badge</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/blimp-badge/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/blimp-badge/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/blimp-badge/blimp_badge_render.jpg" alt="Featured image of post Blimp Badge" />&lt;h2 id="introduction-to-the-blimp-badge">Introduction to the Blimp Badge&lt;/h2>
&lt;p>This a page about the Blimp Badge which is a Atmega328p based badge made for the Sophmore career fair at UAkron to showcase my skills in embedded systems design, circuit layout and programming. The badge features a .96&amp;quot; I2C OLED that outputs a QR code my website mllelectronics.com which has my resume and project portfolio on it.&lt;/p>
&lt;h2 id="hardware-layout--design-considerations">Hardware Layout &amp;amp; Design Considerations&lt;/h2>
&lt;p>The badge is based on Atmega328P and utilzes the internal 8mHz clocking running on 3.3V. Power is provided by a the &amp;ldquo;INSERT NAME&amp;rdquo; regulator. The chosen display was a generic .96&amp;quot; I2C OLED module powered by the SSD1306 CMOS display driver. All components were surface mount with all of them being 1206 sized in order to make everything hand solderable.&lt;/p>
&lt;p>Some interesting design choices that were made such as utilzing the internal clock and the usage of AAA batteries. The internal clock was utilzed as it would have reduced component count and complexity of the design. Normally it would be preferable to have an external clock provides precise timing and accuracy which are needed in asynchronous protocols such as UART or implementation of high speed protocols such as USB. However since I was only utilzing a single I2C bus which is synchronous. AAA batteries were utilized as they easily avaiable and not prone to challanges faced by utilizing a LIPO based battery system.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 129;
flex-basis: 310px"
>
&lt;a href="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/blimp-badge/blimp_schematic.jpg" data-size="3300x2550">
&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/blimp-badge/blimp_schematic.jpg"
width="3300"
height="2550"
srcset="https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/blimp-badge/blimp_schematic_hu820f401f4c3f84d12801fd52a338b934_583337_480x0_resize_q75_box.jpg 480w, https://mikeohio1026.github.io/mllelectronics_v3/mllelectronics_v3/p/blimp-badge/blimp_schematic_hu820f401f4c3f84d12801fd52a338b934_583337_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Blimp V1 Badge Schematic">
&lt;/a>
&lt;figcaption>Blimp V1 Badge Schematic&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="software-used">Software Used&lt;/h2>
&lt;ul>
&lt;li>KiCad V5.1 - PCB Schematic and Electronic Design Software&lt;/li>
&lt;li>Arduino IDE - AVR as ISP to program the board&lt;/li>
&lt;li>Solidworks 2019 - Mechanical design software&lt;/li>
&lt;li>Inkscape - Vector graphics editor to design blimp shape&lt;/li>
&lt;/ul>
&lt;h2 id="lessons-learned">Lessons Learned&lt;/h2>
&lt;p>There were several lessons learned with this project as I had tight timeline to produce and finish this before the Fall 2019 career fair at UAkron.&lt;/p>
&lt;ol>
&lt;li>Check if your I2C device has pull up resistors and design in zero ohm resistors to fix if necessary.&lt;/li>
&lt;li>Ensure that core components such as the processor are in stock and are purchased before starting schematic and PCB layout&lt;/li>
&lt;li>Converting between a Bitmap image to Vector graphic is difficult but extremely rewarding when done&lt;/li>
&lt;/ol>
&lt;h2 id="future-plans">Future Plans&lt;/h2>
&lt;ul>
&lt;li>Make a revision 2 of the Blimp Badge&lt;/li>
&lt;li>Add an external clock circuit so that additional sensors can be utilized.&lt;/li>
&lt;li>Add an ESP8266 module for wireless capability&lt;/li>
&lt;/ul></description></item><item><title>Markdown Syntax Guide</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/markdown-syntax-guide/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/markdown-syntax-guide/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" />&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>â&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h4 id="blockquote-without-attribution">Blockquote without attribution&lt;/h4>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h4 id="blockquote-with-attribution">Blockquote with attribution&lt;/h4>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;!-- raw HTML omitted -->
â &lt;!-- raw HTML omitted -->Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h4 id="code-block-with-backticks">Code block with backticks&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h4>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h4 id="ordered-list">Ordered List&lt;/h4>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-list">Unordered List&lt;/h4>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h4 id="nested-list">Nested list&lt;/h4>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements â abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->GIF&lt;!-- raw HTML omitted --> is a bitmap image format.&lt;/p>
&lt;p>H&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->O&lt;/p>
&lt;p>X&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> + Y&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> = Z&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Press &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CTRL&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->ALT&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->Delete&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> to end the session.&lt;/p>
&lt;p>Most &lt;!-- raw HTML omitted -->salamanders&lt;!-- raw HTML omitted --> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Rich Content</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;hr>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ZJthWmvUzzc"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="twitter-simple-shortcode">Twitter Simple Shortcode&lt;/h2>
&lt;style type="text/css">
.twitter-tweet {
font: 14px/1.45 -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
border-left: 4px solid #2b7bb9;
padding-left: 1.5em;
color: #555;
}
.twitter-tweet a {
color: #2b7bb9;
text-decoration: none;
}
blockquote.twitter-tweet a:hover,
blockquote.twitter-tweet a:focus {
text-decoration: underline;
}
&lt;/style>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">âIn addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.â&lt;br>â Jan Tschichold &lt;a href="https://t.co/gcv7SrhvJb">pic.twitter.com/gcv7SrhvJb&lt;/a>&lt;/p>&amp;mdash; Graphic Design History (@DesignReviewed) &lt;a href="https://twitter.com/DesignReviewed/status/1085870671291310081?ref_src=twsrc%5Etfw">January 17, 2019&lt;/a>&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;style>
.__h_video {
position: relative;
padding-bottom: 56.23%;
height: 0;
overflow: hidden;
width: 100%;
background: #000;
}
.__h_video img {
width: 100%;
height: auto;
color: #000;
}
.__h_video .play {
height: 72px;
width: 72px;
left: 50%;
top: 50%;
margin-left: -36px;
margin-top: -36px;
position: absolute;
cursor: pointer;
}
&lt;/style>
&lt;div class="s_video_simple __h_video">
&lt;a href="https://vimeo.com/4.8912912e&amp;#43;07" rel="noopener" target="_blank">
&lt;img src="https://i.vimeocdn.com/video/337401969_640" srcset="https://i.vimeocdn.com/video/337401969_640 1x, https://i.vimeocdn.com/video/337401969_640 2x" alt="Sing Jan Swing - Kinetic Type">
&lt;div class="play">&lt;svg version="1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 61 61">&lt;circle cx="30.5" cy="30.5" r="30.5" opacity=".8" fill="#000">&lt;/circle>&lt;path d="M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z" fill="#fff">&lt;/path>&lt;/svg>&lt;/div>&lt;/a>&lt;/div></description></item><item><title>Placeholder Text</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/placeholder-text/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" />&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p>
&lt;p>Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p>
&lt;ol>
&lt;li>Exierant elisi ambit vivere dedere&lt;/li>
&lt;li>Duce pollice&lt;/li>
&lt;li>Eris modo&lt;/li>
&lt;li>Spargitque ferrea quos palude&lt;/li>
&lt;/ol>
&lt;p>Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p>
&lt;ol>
&lt;li>Comas hunc haec pietate fetum procerum dixit&lt;/li>
&lt;li>Post torum vates letum Tiresia&lt;/li>
&lt;li>Flumen querellas&lt;/li>
&lt;li>Arcanaque montibus omnes&lt;/li>
&lt;li>Quidem et&lt;/li>
&lt;/ol>
&lt;h1 id="vagus-elidunt">Vagus elidunt&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon" target="_blank" rel="noopener"
>The Van de Graaf Canon&lt;/a>&lt;/p>
&lt;h2 id="mane-refeci-capiebant-unda-mulcebat">Mane refeci capiebant unda mulcebat&lt;/h2>
&lt;p>Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong>Faces illo pepulere&lt;/strong> tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p>
&lt;p>Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p>
&lt;p>Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong>mitis temploque&lt;/strong> vocatus, inque alis, &lt;em>oculos nomen&lt;/em> non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong>parte&lt;/strong>.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a class="link" href="https://katex.org/docs/autorender.html" target="_blank" rel="noopener"
>Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">{{&lt;/span> &lt;span class="k">if&lt;/span> or .Params.math .Site.Params.math &lt;span class="o">}}&lt;/span>
&lt;span class="o">{{&lt;/span> partial &lt;span class="s2">&amp;#34;math.html&amp;#34;&lt;/span> . &lt;span class="o">}}&lt;/span>
&lt;span class="o">{{&lt;/span> end &lt;span class="o">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project&amp;rsquo;s configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a class="link" href="https://katex.org/docs/supported.html" target="_blank" rel="noopener"
>Supported TeX Functions&lt;/a>&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>https://mikeohio1026.github.io/mllelectronics_v3/p/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://mikeohio1026.github.io/mllelectronics_v3/p/emoji-support/</guid><description>&lt;img src="https://mikeohio1026.github.io/mllelectronics_v3/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" />&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a class="link" href="https://gohugo.io/functions/emojify/" target="_blank" rel="noopener"
>&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a class="link" href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes" target="_blank" rel="noopener"
>Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site&amp;rsquo;s &lt;a class="link" href="https://gohugo.io/getting-started/configuration/" target="_blank" rel="noopener"
>configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The &lt;a class="link" href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener"
>Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">.emoji {
font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
}&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>